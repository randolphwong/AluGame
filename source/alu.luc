
global Alufn {
  const ADD = 6b000000;
  const SUB = 6b000001;
  const AND = 6b011000;
  const OR  = 6b011110;
  const XOR = 6b010110;
  const NOT = 6b010111;
  const LDR = 6b011010;
  const SHL = 6b100000;
  const SHR = 6b100001;
  const SRA = 6b100011;
  const ROL = 6b100100;
  const ROR = 6b100101;
  const EQ  = 6b110011;
  const LT  = 6b110101;
  const LE  = 6b110111;
  const ULT  = 6b111101;
  const ULE  = 6b111111;
}

module alu (
    input in_a[16],
    input in_b[16],
    input alufn[6],
    output out[16]
  ) {
  
  always {
    out = 0;
    
    case (alufn) {
      Alufn.ADD:
        out = in_a + in_b;
      Alufn.SUB:
        out = $signed(in_a) - $signed(in_b);
      Alufn.AND:
        out = in_a & in_b;
      Alufn.OR:
        out = in_a | in_b;
      Alufn.XOR:
        out = in_a ^ in_b;
      Alufn.NOT:
        out = ~in_a;
      Alufn.LDR:
        out = in_a;
      Alufn.SHL:
        out = in_a << in_b[3:0];
      Alufn.SHR:
        out = in_a >> in_b[3:0];
      Alufn.SRA:
        out = $signed(in_a) >>> in_b[3:0];
      Alufn.ROL:
        out = ((in_a << in_b[3:0]) & 16hFFFF) | ((in_a & 16hFFFF) >> (16 - in_b[3:0]));
      Alufn.ROR:
        out = ((in_a & 16hFF) >> in_b[3:0]) | ((in_a << (16 - in_b[3:0])) & 16hFF);
      Alufn.EQ:
        out = in_a == in_b;
      Alufn.LT:
        out = $signed(in_a) < $signed(in_b);
      Alufn.LE:
        out = $signed(in_a) <= $signed(in_b);
      Alufn.ULT:
        out = in_a < in_b;
      Alufn.ULE:
        out = in_a <= in_b;
    }
  }
}
