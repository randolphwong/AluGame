module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output always_high[2]
  ) {
  
  sig rst;                  // reset signal
  const MAX_LEVEL = 10;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // The button conditioner will synchronize and debounce a button input so that we can 
    // reliably tell when it is pressed.
    button_conditioner button_up_cond;
    button_conditioner button_down_cond;
    button_conditioner button_left_cond;
    button_conditioner button_right_cond;
    button_conditioner button_reset_cond;
    
    // The edge detector will detect when there is an edge on a button press and will
    // set the output high for that clock cycle.
    edge_detector up_edge(#RISE(1), #FALL(0));
    edge_detector down_edge(#RISE(1), #FALL(0));
    edge_detector left_edge(#RISE(1), #FALL(0));
    edge_detector right_edge(#RISE(1), #FALL(0));
    edge_detector reset_edge(#RISE(1), #FALL(0));
    
    
    timer timey;
    
    .rst(rst) {

/**************************************************************************************************

    current_map and current_position are 16-bit registers that keep tracks of the state of the
    current map and position respectively. 

    A map is a 4x4 grid that contains 16 tiles. Each tile can either be empty or tiled. By using
    0 to represent an empty tile and 1 to represent the opposite, a map can be visualised as such:
    
    0 0 0 0
    0 0 0 0
    0 1 1 0
    0 1 1 1

    This can be translated into a 16-bit number 0000 0000 0110 1110. The lower left hand corner
    of the map is the LSB, while the upper right hand corner of the map is the MSB.

    A current position is a 4x4 grid with only 1 grid being occupied at any point of time. Here
    is a visualisation of the grid:

    0 0 0 0
    0 0 0 0
    0 0 0 1
    0 0 0 0

    Similar to the map, this can also be translated into a 16-bit number, where the LSB and MSB
    correspond to the same grids as in the map.
     
**************************************************************************************************/
      dff current_map[64];        // current map state, each bit represents a physical tile
      dff current_position[64];   // current position state, high bit represents current position
      dff current_timelimit[6];   // time limit for the current level
      dff current_level[4](#INIT(1));   // current level state, ranging from level 1 to 15

      // FSM for a single game.
      fsm game_fsm = {INIT, INITIALISE_LEVEL, IDLE, LEFT_BTN_PRESSED, RIGHT_BTN_PRESSED, 
                          UP_BTN_PRESSED, DOWN_BTN_PRESSED, GO_LEFT, GO_RIGHT, GO_UP, GO_DOWN,
                          CHECK_EMPTY_TILE, UPDATE_MAP, CHECK_ENDLEVEL, CHECK_GAMEOVER, WIN,
                          GAMEOVER, CHECK_ENDGAME, COMPLETE, LOAD_SCREEN};
      
      // The blinker employs a dff to count up. Output is high on half the count. This
      // produces a blinking effect on the output. We use this to blink the LED of the 
      // current position to let the player know where they are at the moment.
      blinker blinky;
      
      slow_clk s_clk(#DIV(21));
      
      array_to_matrix matrix;
      
      scroller my_scroller;
    }
  }
  
/**************************************************************************************************

     Given any button press, if the direction is towards a dead end, we will need to prevent
     such a move. We define four constants to determine if the current position is considered
     a boundary case. 
  
     When moving up, current_position value must be less than 0001 0000 0000 0000 in order to 
     produce a valid output upon being shifted left by 4 bits. 
  
     When moving down, current_position value must be greater than 0000 0000 0000 1000 in order to 
     produce a valid output upon being shifted right by 4 bits. 
         
     When moving to the left, we check whether the current_position bit is at the corner by taking 
     the conjunctive result of current_position and left_boundary. The same applies when moving to
     the right.
     
**************************************************************************************************/
  sig up_boundary[64];      // 00000000 111111111 ... 111111111
  sig down_boundary[64];    // 00000000 ... 00000000 111111111
  sig left_boundary[64];    // 00000001 ... 00000001
  sig right_boundary[64];   // 10000000 ... 10000000

  sig victory_screen[8][64];

  sig led_matrix[8][8];
  
  alu my_alu;
  
  level_ROM mlevel_ROM;
  
  bin_to_bcd my_bin_to_bcd;
  
  multi_seven_seg my_seven_seg;
    
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off

    led_matrix = 8x{{8b0}};
    
    io_led[2] = 8hff;
    
    always_high = 2b11;     // simulate vdd, since we don't have enough vdd pins
    
    button_up_cond.in = io_button[0];      // synchronise up button press
    up_edge.in = button_up_cond.out;       // get edge detection from sychonised button press
    
    button_reset_cond.in = io_button[1];   // synchronise right button press
    reset_edge.in = button_reset_cond.out; // get edge detection from sychonised button press
    
    button_down_cond.in = io_button[2];    // synchronise down button press
    down_edge.in = button_down_cond.out;   // get edge detection from sychonised button press
    
    button_left_cond.in = io_button[3];    // synchronise left button press
    left_edge.in = button_left_cond.out;   // get edge detection from sychonised button press
                                                                                             
    button_right_cond.in = io_button[4];   // synchronise right button press
    right_edge.in = button_right_cond.out; // get edge detection from sychonised button press
    
    // Initialise boundary constants
    left_boundary = 64h0101010101010101;
    right_boundary = 64h8080808080808080;
    up_boundary = 64h00ffffffffffffff;
    down_boundary = 64h00000000000000ff;
    
    victory_screen[0] = 64b0000000000000000000000000000000000000000000000000000000000000000;
    victory_screen[1] = 64b0000000000000010000100011100100000000010010000100001100001000100;
    victory_screen[2] = 64b0000000000000010001100001000010000000100010000100010010000101000;
    victory_screen[3] = 64b0000000000000010010100001000010000000100010000100100001000010000;
    victory_screen[4] = 64b0000000000000010100100001000001001001000010000100100001000010000;
    victory_screen[5] = 64b0000000000000011000100001000001010101000001001000010010000010000;
    victory_screen[6] = 64b0000000000000010000100011100000100010000000110000001100000010000;
    victory_screen[7] = 64b0000000000000000000000000000000000000000000000000000000000000000;

    my_scroller.screen = victory_screen;
    
    // Map current_map to led matrix
    led_matrix = {current_map.q[63-:8], 
                  current_map.q[55-:8],
                  current_map.q[47-:8],
                  current_map.q[39-:8],
                  current_map.q[31-:8],
                  current_map.q[23-:8],
                  current_map.q[15-:8],
                  current_map.q[7-:8]};

    my_alu.in_a = 0;
    my_alu.in_b = 0;
    my_alu.alufn = 0;
    
    mlevel_ROM.level = 0;
    
    timey.rst = 0;
    
    my_bin_to_bcd.a = 0;
    
    my_seven_seg.values = 2x{{4b0}};
    
    matrix.values = 8x{{8b0}};
    
    case (game_fsm.q) {
      game_fsm.INIT:
        if (reset_edge.out) { // center button pressed
          game_fsm.d = game_fsm.INITIALISE_LEVEL;
        }
        
      game_fsm.INITIALISE_LEVEL:
        mlevel_ROM.level = current_level.q;
        current_map.d = mlevel_ROM.map;              // initialise map
        current_timelimit.d = mlevel_ROM.time_limit; // set time limit

        // Here we use the current_position register as a placeholder to perform the
        // load screen.
        current_position.d = 64h8000000000000000;
        game_fsm.d = game_fsm.LOAD_SCREEN;

      game_fsm.LOAD_SCREEN:
        timey.rst = 1;  // restart timing

        my_alu.in_a = current_position.q;
        my_alu.in_b = 1;
        my_alu.alufn = Alufn.SRA;

        if (s_clk.out)
          current_position.d = my_alu.out;

        if ((timey.out == 60) && (current_position.q == 64hffffffffffffffff)) {
//        if ((timey.out == 60) && (current_position.q == 0)) {
          mlevel_ROM.level = current_level.q;
          current_position.d = mlevel_ROM.position;
          game_fsm.d = game_fsm.IDLE;
        }

        // Map load screen onto the led matrix
        led_matrix = {current_position.q[63-:8], 
                      current_position.q[55-:8],
                      current_position.q[47-:8],
                      current_position.q[39-:8],
                      current_position.q[31-:8],
                      current_position.q[23-:8],
                      current_position.q[15-:8],
                      current_position.q[7-:8]};
          
        
      game_fsm.IDLE:
        // Wait for user to press any buttons.
        if (reset_edge.out) //if center button is pressed
            game_fsm.d = game_fsm.INITIALISE_LEVEL;
        if (up_edge.out) // rising edge of up button detected
          game_fsm.d = game_fsm.UP_BTN_PRESSED;
        if (down_edge.out) // rising edge of down button detected
          game_fsm.d = game_fsm.DOWN_BTN_PRESSED;
        if (left_edge.out) // rising edge of left button detected
          game_fsm.d = game_fsm.LEFT_BTN_PRESSED;
        if (right_edge.out) // rising edge of right button detected
          game_fsm.d = game_fsm.RIGHT_BTN_PRESSED;
        
        // Display the current state of map onto the IO Shield LEDs.
        // Also make the current position more obvious by blinking the corresponding LED.
        // To do this, set io_led[1:0] = current map | (current position & blink state).
        my_alu.in_a = current_map.q;
        my_alu.in_b = (current_position.q & 64x{blinky.blink});
        my_alu.alufn = Alufn.OR;
     
        led_matrix = {my_alu.out[63-:8], 
                      my_alu.out[55-:8],
                      my_alu.out[47-:8],
                      my_alu.out[39-:8],
                      my_alu.out[31-:8],
                      my_alu.out[23-:8],
                      my_alu.out[15-:8],
                      my_alu.out[7-:8]};
        
        // Display the count down timer on the 7 segment display
        my_bin_to_bcd.a = timey.out - (60 - current_timelimit.q);
        my_seven_seg.values = {my_bin_to_bcd.out1, my_bin_to_bcd.out0};
        io_seg = ~my_seven_seg.seg0;
        io_led[2] = ~my_seven_seg.seg1;
        
        // Check whether the time is up
        if (timey.out == (60 - current_timelimit.q)) { // time's up!
          game_fsm.d = game_fsm.CHECK_GAMEOVER;
        }

      game_fsm.UP_BTN_PRESSED:
        // Determine whether it is possible to move up by checking
        // if the current position is at the upper most row.
        // Compare current position with up_boundary. It is a valid move 
        // if current position is less than up_boundary.
        my_alu.in_a = current_position.q;
        my_alu.in_b = up_boundary;          // 0000 1111 1111 1111
        my_alu.alufn = Alufn.AND;

        if (my_alu.out)       // not a boundary case, proceed to move up
          game_fsm.d = game_fsm.GO_UP;
        else                  // boundary detected, ignore button press
          game_fsm.d = game_fsm.IDLE;
          
      game_fsm.DOWN_BTN_PRESSED:
        // Determine whether it is possible to move down by checking
        // if the current position is at the lower most row.
        // Compare current position with down_boundary. It is a valid move 
        // if current position is greater than down_boundary.
        my_alu.in_a = current_position.q;
        my_alu.in_b = down_boundary;        // 0000 0000 0000 1111
        my_alu.alufn = Alufn.AND;            // use <= operator
        
        if (!my_alu.out)      // not a boundary case, proceed to move down
          game_fsm.d = game_fsm.GO_DOWN;
        else                  // boundary detected, ignore button press
          game_fsm.d = game_fsm.IDLE;
          
      game_fsm.LEFT_BTN_PRESSED:
        // Determine whether it is possible to move left by checking
        // if the current position is at a corner.
        // It is a valid move if the conjunction between current position 
        // and left_boundary is 0.
        my_alu.in_a = current_position.q;
        my_alu.in_b = left_boundary;        // 0001 0001 0001 0001
        my_alu.alufn = Alufn.AND;
        
        if (my_alu.out == 0)  // not a boundary case, proceed to move left
          game_fsm.d = game_fsm.GO_LEFT;
        else                  // boundary detected, ignore button press
          game_fsm.d = game_fsm.IDLE;
          
      game_fsm.RIGHT_BTN_PRESSED:
        // Determine whether it is possible to move right by checking
        // if the current position is at a corner.
        // It is a valid move if the conjunction between current position 
        // and right_boundary is 0.
        my_alu.in_a = current_position.q;
        my_alu.in_b = right_boundary;       // 1000 1000 1000 1000
        my_alu.alufn = Alufn.AND;
        
        if (my_alu.out == 0)  // not a boundary case, proceed to move right
          game_fsm.d = game_fsm.GO_RIGHT;
        else                  // boundary detected, ignore button press
          game_fsm.d = game_fsm.IDLE;
      
      game_fsm.GO_UP:
        // Move current position to the tile above.
        // This is done by shifting current position to the left by 4.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 8;                    // shift left by 4
        my_alu.alufn = Alufn.SHL;
        
        current_position.d = my_alu.out;
        game_fsm.d = game_fsm.CHECK_EMPTY_TILE;
      
      game_fsm.GO_DOWN:
        // Move current position to the tile below.
        // This is done by shifting current position to the right by 4.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 8;                    // shift right by 4
        my_alu.alufn = Alufn.SHR;
        
        current_position.d = my_alu.out;
        game_fsm.d = game_fsm.CHECK_EMPTY_TILE;
      
      game_fsm.GO_LEFT:
        // Move current position to the tile at the left.
        // This is done by shifting current position to the right by 1.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 1;                    // shift right by 1
        my_alu.alufn = Alufn.SHR;
        
        current_position.d = my_alu.out;
        game_fsm.d = game_fsm.CHECK_EMPTY_TILE;
      
      game_fsm.GO_RIGHT:
        // Move current position to the tile at the left.
        // This is done by shifting current position to the left by 1.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 1;                    // shift left by 1
        my_alu.alufn = Alufn.SHL;
        
        current_position.d = my_alu.out;
        game_fsm.d = game_fsm.CHECK_EMPTY_TILE;
    
      game_fsm.CHECK_EMPTY_TILE:
        // Determine whether the current position is on an empty tile.
        // This is the case when the conjunction of current position 
        // and current map is 0.
        my_alu.in_a = current_position.q;
        my_alu.in_b = current_map.q;
        my_alu.alufn = Alufn.AND;
        
        if (my_alu.out == 0) // current position is on empty tile
          game_fsm.d = game_fsm.GAMEOVER;
          
        else                  // current position is on a legit tile
          game_fsm.d = game_fsm.UPDATE_MAP;
        
      game_fsm.UPDATE_MAP:
        // Update the map, that is, delete the tile that the current position
        // is on. This is done by flipping the bit on the current map that 
        // corresponds to the high bit on current position.
        my_alu.in_a = current_position.q;
        my_alu.in_b = current_map.q;
        my_alu.alufn = Alufn.XOR;
        
        current_map.d = my_alu.out;    // current map = current map ^ current position
        game_fsm.d = game_fsm.CHECK_ENDLEVEL;
      
      game_fsm.CHECK_ENDLEVEL:
        // Determine whether this instance of game has ended. When all tiles have been
        // deleted, then the game is considered to be ended.
        my_alu.in_a = current_map.q;
        my_alu.in_b = 0;
        my_alu.alufn = Alufn.EQ;      // current map == 0
        
        if (my_alu.out)                         // all tiles have been deleted
          game_fsm.d = game_fsm.WIN;
          
        else                                    // not all tiles have been deleted
          game_fsm.d = game_fsm.IDLE;   // go back to idle to wait for user input
      
      game_fsm.CHECK_GAMEOVER:
        // Check if the game is over, or whether the the player has completed the game.
        // Last level requires the player to not move at all in order to win.
        if (current_level.q != MAX_LEVEL) // not yet at the last level
          game_fsm.d = game_fsm.GAMEOVER; // player lost the current level
        else { // player is at the last level
          mlevel_ROM.level = current_level.q;
          my_alu.in_a = current_map.q;
          my_alu.in_b = mlevel_ROM.map;
          my_alu.alufn = Alufn.EQ;      // current map == initial map
          
          if (my_alu.out)                         // player hasn't made any moves
            game_fsm.d = game_fsm.COMPLETE;   // we have a champ!
          else                                    // player made some moves
            game_fsm.d = game_fsm.GAMEOVER;   // gameover...
        }
      
      game_fsm.GAMEOVER:
        // Player lost the level. Waits for user to press the center button 
        // to restart level.
//        io_led[2][6] = 1;   // second right most LED lights up to signify game over
        if (reset_edge.out)  { //if center button is pressed
            game_fsm.d = game_fsm.INITIALISE_LEVEL;
        }
        
        my_alu.in_a = current_position.q;
        my_alu.in_b = (64x{blinky.blink} & current_map.q);
        my_alu.alufn = Alufn.OR;
     
        led_matrix = {my_alu.out[63-:8], 
                      my_alu.out[55-:8],
                      my_alu.out[47-:8],
                      my_alu.out[39-:8],
                      my_alu.out[31-:8],
                      my_alu.out[23-:8],
                      my_alu.out[15-:8],
                      my_alu.out[7-:8]};
              
      game_fsm.WIN:
        // Player won the level. Increase the level counter and prepare
        // to begin new game.
        my_alu.in_a = current_level.q;
        my_alu.in_b = 1;
        my_alu.alufn = Alufn.ADD;      // current level ++
        
        current_level.d = my_alu.out[3:0]; // update the current level
        game_fsm.d = game_fsm.INITIALISE_LEVEL; // begin next level
        
      game_fsm.CHECK_ENDGAME:
        // Determine whether player has completed all levels. 
        my_alu.in_a = current_level.q;
        my_alu.in_b = 10;
        my_alu.alufn = Alufn.LT;      // use < operator
        if (my_alu.out) // not yet complete
          game_fsm.d = game_fsm.INITIALISE_LEVEL;
        else            // game completed
          game_fsm.d = game_fsm.COMPLETE;
        
      game_fsm.COMPLETE:
        //game is completed and all the map leds light up and come alive for celebration!
        led_matrix = my_scroller.out;
    }

    // Use the scroller module to get the respective row and col select
    matrix.values = led_matrix;
    io_led[1] = matrix.row_sel;
    io_led[0] = ~matrix.col_sel;
  }
}
