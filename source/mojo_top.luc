module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // The button conditioner will synchronize and debounce a button input so that we can 
    // reliably tell when it is pressed.
    button_conditioner button_up_cond;
    button_conditioner button_down_cond;
    button_conditioner button_left_cond;
    button_conditioner button_right_cond;
    
    // The edge detector will detect when there is an edge on a button press and will
    // set the output high for that clock cycle.
    edge_detector up_edge(#RISE(1), #FALL(0));
    edge_detector down_edge(#RISE(1), #FALL(0));
    edge_detector left_edge(#RISE(1), #FALL(0));
    edge_detector right_edge(#RISE(1), #FALL(0));
    
    .rst(rst) {

/**************************************************************************************************

    current_map and current_position are 16-bit registers that keep tracks of the state of the
    current map and position respectively. 

    A map is a 4x4 grid that contains 16 tiles. Each tile can either be empty or tiled. By using
    0 to represent an empty tile and 1 to represent the opposite, a map can be visualised as such:
    
    0 0 0 0
    0 0 0 0
    0 1 1 0
    0 1 1 1

    This can be translated into a 16-bit number 0000 0000 0110 1110. The lower left hand corner
    of the map is the LSB, while the upper right hand corner of the map is the MSB.

    A current position is a 4x4 grid with only 1 grid being occupied at any point of time. Here
    is a visualisation of the grid:

    0 0 0 0
    0 0 0 0
    0 0 0 1
    0 0 0 0

    Similar to the map, this can also be translated into a 16-bit number, where the LSB and MSB
    correspond to the same grids as in the map.
     
**************************************************************************************************/
      dff current_map[16];        // current map state, each bit represents a physical tile
      dff current_position[16];   // current position state, high bit represents current position
      dff current_level[4](#INIT(1));   // current level state, ranging from level 1 to 15
      
      // FSM for a single game.
      fsm instance_fsm = {IDLE, LEFT_BTN_PRESSED, RIGHT_BTN_PRESSED, 
                          UP_BTN_PRESSED, DOWN_BTN_PRESSED, 
                          GO_LEFT, GO_RIGHT, GO_UP, GO_DOWN,
                          CHECK_EMPTY_TILE, UPDATE_MAP, CHECK_ENDGAME,
                          GAMEOVER, WIN};
        
      // FSM for the overall game.
      fsm overall_fsm = {INIT, START_GAME, IDLE, COMPLETE};
      
      // The blinker employers a dff to count up. Output is high on half the count. This
      // produces a blinking effect on the output. We use this to blink the LED of the 
      // current position to let the player know where they are at the moment.
      blinker blinky;
    }
  }
  
/**************************************************************************************************

     Given any button press, if the direction is towards a dead end, we will need to prevent
     such a move. We define four constants to determine if the current position is considered
     a boundary case. 
  
     When moving up, current_position value must be less than 0001 0000 0000 0000 in order to 
     produce a valid output upon being shifted left by 4 bits. 
  
     When moving down, current_position value must be greater than 0000 0000 0000 1000 in order to 
     produce a valid output upon being shifted right by 4 bits. 
         
     When moving to the left, we check whether the current_position bit is at the corner by taking 
     the conjunctive result of current_position and left_boundary. The same applies when moving to
     the right.
     
**************************************************************************************************/
  sig up_boundary[16];      // 0001 0000 0000 0000
  sig down_boundary[16];    // 0000 0000 0000 1000
  sig left_boundary[16];    // 0001 0001 0001 0001
  sig right_boundary[16];   // 1000 1000 1000 1000
  
  alu my_alu;
  
  level_ROM mlevel_ROM;
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    button_up_cond.in = io_button[0];      // synchronise up button press
    up_edge.in = button_up_cond.out;       // get edge detection from sychonised button press
    
    button_down_cond.in = io_button[2];    // synchronise down button press
    down_edge.in = button_down_cond.out;   // get edge detection from sychonised button press
    
    button_left_cond.in = io_button[3];    // synchronise left button press
    left_edge.in = button_left_cond.out;   // get edge detection from sychonised button press
                                                                                             
    button_right_cond.in = io_button[4];   // synchronise right button press
    right_edge.in = button_right_cond.out; // get edge detection from sychonised button press
    
    
    // Initialise boundary constants
    left_boundary = 16b0001000100010001;
    right_boundary = 16b1000100010001000;
    up_boundary = 16b0001000000000000;
    down_boundary = 16b0000000000001000;
    
    // Map current_map to IO Shield LED displays
    io_led[1] = current_map.q[15:8];
    io_led[0] = current_map.q[7:0];    

    my_alu.in_a = 0;
    my_alu.in_b = 0;
    my_alu.alufn = 0;
    
    mlevel_ROM.level = 0;

    case (overall_fsm.q) {
      overall_fsm.INIT:
        if (io_button[1]) { // center button pressed
          overall_fsm.d = overall_fsm.START_GAME;
        }
        
      overall_fsm.START_GAME:
        mlevel_ROM.level = current_level.q;
        current_map.d = mlevel_ROM.map;        // hard coded map
        current_position.d = mlevel_ROM.position;   // current position
        
        overall_fsm.d = overall_fsm.IDLE;
        
        
      overall_fsm.COMPLETE:
      //game is completed and all the map leds light up and come alive for celebration!
        io_led[2][7] = 1; // Right most LED lights up to signify a win in current level
        io_led[1] = 8b11111111;
        io_led[0] = 8b11111111;
        
    }
    
    case (instance_fsm.q) {
      instance_fsm.IDLE:
        if (overall_fsm.q == overall_fsm.IDLE) { // wait for overall fsm to be done setting up
          // Wait for user to press any buttons.
          if (up_edge.out) // rising edge of up button detected
            instance_fsm.d = instance_fsm.UP_BTN_PRESSED;
          if (down_edge.out) // rising edge of down button detected
            instance_fsm.d = instance_fsm.DOWN_BTN_PRESSED;
          if (left_edge.out) // rising edge of left button detected
            instance_fsm.d = instance_fsm.LEFT_BTN_PRESSED;
          if (right_edge.out) // rising edge of right button detected
            instance_fsm.d = instance_fsm.RIGHT_BTN_PRESSED;
          
          // Display the current state of map onto the IO Shield LEDs.
          // Also make the current position more obvious by blinking the corresponding LED.
          // To do this, set io_led[1:0] = current map | (current position & blink state).
          my_alu.in_a = current_map.q;
          my_alu.in_b = (current_position.q & 16x{blinky.blink});
          my_alu.alufn = Alufn.OR;
          io_led[1] = my_alu.out[15:8];
          io_led[0] = my_alu.out[7:0];
          
          // for debugging
          io_led[2] = current_level.q; // display current level at the left more set of LEDs
        }

      instance_fsm.UP_BTN_PRESSED:
        // Determine whether it is possible to move up by checking
        // if the current position is at the upper most row.
        // Compare current position with up_boundary. It is a valid move 
        // if current position is less than up_boundary.
        my_alu.in_a = current_position.q;
        my_alu.in_b = up_boundary;          // 0001 0000 0000 0000
        my_alu.alufn = Alufn.LT;            // use < operator

        if (my_alu.out)       // not a boundary case, proceed to move up
          instance_fsm.d = instance_fsm.GO_UP;
        else                  // boundary detected, ignore button press
          instance_fsm.d = instance_fsm.IDLE;
          
      instance_fsm.DOWN_BTN_PRESSED:
        // Determine whether it is possible to move down by checking
        // if the current position is at the lower most row.
        // Compare current position with down_boundary. It is a valid move 
        // if current position is greater than down_boundary.
        my_alu.in_a = current_position.q;
        my_alu.in_b = down_boundary;        // 0000 0000 0000 1000
        my_alu.alufn = Alufn.LE;            // use <= operator
        
        if (!my_alu.out)      // not a boundary case, proceed to move down
          instance_fsm.d = instance_fsm.GO_DOWN;
        else                  // boundary detected, ignore button press
          instance_fsm.d = instance_fsm.IDLE;
          
      instance_fsm.LEFT_BTN_PRESSED:
        // Determine whether it is possible to move left by checking
        // if the current position is at a corner.
        // It is a valid move if the conjunction between current position 
        // and left_boundary is 0.
        my_alu.in_a = current_position.q;
        my_alu.in_b = left_boundary;        // 0001 0001 0001 0001
        my_alu.alufn = Alufn.AND;
        
        if (my_alu.out == 0)  // not a boundary case, proceed to move left
          instance_fsm.d = instance_fsm.GO_LEFT;
        else                  // boundary detected, ignore button press
          instance_fsm.d = instance_fsm.IDLE;
          
      instance_fsm.RIGHT_BTN_PRESSED:
        // Determine whether it is possible to move right by checking
        // if the current position is at a corner.
        // It is a valid move if the conjunction between current position 
        // and right_boundary is 0.
        my_alu.in_a = current_position.q;
        my_alu.in_b = right_boundary;       // 1000 1000 1000 1000
        my_alu.alufn = Alufn.AND;
        
        if (my_alu.out == 0)  // not a boundary case, proceed to move right
          instance_fsm.d = instance_fsm.GO_RIGHT;
        else                  // boundary detected, ignore button press
          instance_fsm.d = instance_fsm.IDLE;
      
      instance_fsm.GO_UP:
        // Move current position to the tile above.
        // This is done by shifting current position to the left by 4.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 4;                    // shift left by 4
        my_alu.alufn = Alufn.SHL;
        
        current_position.d = my_alu.out;
        instance_fsm.d = instance_fsm.CHECK_EMPTY_TILE;
      
      instance_fsm.GO_DOWN:
        // Move current position to the tile below.
        // This is done by shifting current position to the right by 4.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 4;                    // shift right by 4
        my_alu.alufn = Alufn.SHR;
        
        current_position.d = my_alu.out;
        instance_fsm.d = instance_fsm.CHECK_EMPTY_TILE;
      
      instance_fsm.GO_LEFT:
        // Move current position to the tile at the left.
        // This is done by shifting current position to the right by 1.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 1;                    // shift right by 1
        my_alu.alufn = Alufn.SHR;
        
        current_position.d = my_alu.out;
        instance_fsm.d = instance_fsm.CHECK_EMPTY_TILE;
      
      instance_fsm.GO_RIGHT:
        // Move current position to the tile at the left.
        // This is done by shifting current position to the left by 1.
        my_alu.in_a = current_position.q;
        my_alu.in_b = 1;                    // shift left by 1
        my_alu.alufn = Alufn.SHL;
        
        current_position.d = my_alu.out;
        instance_fsm.d = instance_fsm.CHECK_EMPTY_TILE;
    
      instance_fsm.CHECK_EMPTY_TILE:
        // Determine whether the current position is on an empty tile.
        // This is the case when the conjunction of current position 
        // and current map is 0.
        my_alu.in_a = current_position.q;
        my_alu.in_b = current_map.q;
        my_alu.alufn = Alufn.AND;
        
        if (my_alu.out == 0) // current position is on empty tile
          instance_fsm.d = instance_fsm.GAMEOVER;
          
        else                  // current position is on a legit tile
          instance_fsm.d = instance_fsm.UPDATE_MAP;
        
      
        
      instance_fsm.UPDATE_MAP:
        // Update the map, that is, delete the tile that the current position
        // is on. This is done by flipping the bit on the current map that 
        // corresponds to the high bit on current position.
        my_alu.in_a = current_position.q;
        my_alu.in_b = current_map.q;
        my_alu.alufn = Alufn.XOR;
        
        current_map.d = my_alu.out;    // current map = current map ^ current position
        instance_fsm.d = instance_fsm.CHECK_ENDGAME;
      
      instance_fsm.CHECK_ENDGAME:
        // Determine whether this instance of game has ended. When all tiles have been
        // deleted, then the game is considered to be ended.
        my_alu.in_a = current_map.q;
        my_alu.in_b = 0;
        my_alu.alufn = Alufn.EQ;      // current map == 0
        
        if (my_alu.out)                         // all tiles have been deleted
          instance_fsm.d = instance_fsm.WIN;
          
        else                                    // not all tiles have been deleted
          instance_fsm.d = instance_fsm.IDLE;   // go back to idle to wait for user input
      
      instance_fsm.GAMEOVER:
        // Player lost the level. Waits for user to press the center button 
        // to restart level.
        io_led[2][6] = 1;   // second right most LED lights up to signify game over
        if (io_button[1])  { //if center button is pressed
            overall_fsm.d = overall_fsm.START_GAME;
            instance_fsm.d = instance_fsm.IDLE;
        }
      
      instance_fsm.WIN:
        // Player won the level. Increase the level counter and prepare
        // to begin new game.
        my_alu.in_a = current_level.q;
        my_alu.in_b = 1;
        my_alu.alufn = Alufn.ADD;      // current level ++
        
        current_level.d = my_alu.out[3:0]; // update the current level
        overall_fsm.d = overall_fsm.START_GAME; // begin new level
        instance_fsm.d = instance_fsm.IDLE;
    }
  }
}
